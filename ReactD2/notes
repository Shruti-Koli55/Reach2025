Chapter 02 - Assignment - Igniting our App


● - What is `NPM`?
NPM (Node Package Manager) is the default package manager for Node.js. It allows developers to:
✔ Install, manage, and share JavaScript libraries and tools.
✔ Download and use dependencies from the NPM registry.
✔ Run project scripts using npm run <script-name>.



● - What is `Parcel/Webpack`? Why do we need it?
Parcel and Webpack are bundlers that optimize and package JavaScript applications.
✔ Parcel – A zero-configuration bundler with fast performance.
✔ Webpack – A highly configurable bundler with plugins and loaders.
Why do we need them?
Bundles multiple files into a single optimized file.
Handles JS, CSS, images, and assets efficiently.
Supports Tree Shaking, Code Splitting, and Hot Module Replacement (HMR)


● - What is `.parcel-cache`
A cache folder used by Parcel to store processed files.
Helps in faster rebuilds by avoiding redundant work.
Deleting it may slow down the next build but won't break the project.



● - What is `npx` ?
A command-line tool that runs Node.js packages without installing them globally.
Included with NPM (since version 5.2).
Useful for running CLI tools temporarily.


● - What is difference between `dependencies` vs `devDependencies`
Required for the application to run.	Required only during development.


● - What is Tree Shaking?
A technique used to remove unused code from a bundle.
Helps in reducing the final file size.
Works with ES6 module imports (import).


● - What is Hot Module Replacement?
Allows updating modules without a full page reload.
Improves development speed by maintaining the app's state.
Supported by bundlers like Webpack and Parcel.


● - List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words.
Zero Configuration – Works out of the box without manual setup.
Fast Build Performance – Uses caching for quick rebuilds.
Hot Module Replacement (HMR) – Updates code without refreshing the page.
Automatic Code Splitting – Optimizes the bundle by loading only required parts.
Tree Shaking – Removes unused code for smaller bundles.
✔ Zero Configuration – Unlike Webpack, Parcel doesn’t require a complex config file.
✔ HMR – Keeps changes live without a full reload.
✔ Code Splitting – Improves performance by lazy loading assets.




● - What is `.gitignore`? What should we add and not add into it?
A file that tells Git which files/folders to ignore.
Common files to add:
node_modules/
.env
.parcel-cache/
dist/


● - What is the difference between `package.json` and `package-lock.json`
package.json	Contains project metadata, scripts, and dependencies.
package-lock.json	Locks exact dependency versions to ensure consistent installs.


● - Why should I not modify `package-lock.json`?
Ensures consistent dependency versions across different environments.
Manually modifying it can lead to package conflicts and unpredictable behavior.


● - What is `node_modules` ? Is it a good idea to push that on git?
A folder where all installed packages are stored.
❌ Never push to Git (use .gitignore).
Instead, share package.json and run:



● - What is the `dist` folder?
The distribution folder containing the final bundled files.
Generated by bundlers like Parcel/Webpack.
Used for production deployment.



● - What is `browserlists`
A configuration to define browser support for CSS and JavaScript features.
Used by tools like Babel, Autoprefixer, and Parcel.


Read about dif bundlers: vite, webpack, parcel
Vite	Super fast, uses ES Modules, best for modern apps.
Webpack	Highly customizable, widely used, but requires configuration.
Parcel	Zero-config, fast, built-in optimizations.


● Read about: ^ - caret and ~ - tilda
^1.2.3 → Updates minor and patch versions (e.g., 1.3.0 but not 2.0.0).
~1.2.3 → Updates only patch versions (e.g., 1.2.5 but not 1.3.0).


● Read about Script types in html (MDN Docs)
<script> – Default JavaScript execution.
<script type="module"> – Enables ES6 modules.
<script async> – Loads and executes script asynchronously.
<script defer> – Loads the script but executes after the document is parsed.



- In your existing project
● - intialize `npm` into your repo
● - install `react` and `react-dom`
● - remove CDN links of react
● - install parcel
● - ignite your app with parcel
● - add scripts for “start” and “build” with parcel commands
● - add `.gitignore` file
● - add `browserlists`
● - build a production version of your code using `parcel build`



# References
● Creating your own create-react-app
https://medium.com/@JedaiSaboteur/creating-a-react-app-from-scratch-f3c693b84658
● Parcel Documentation
https://parceljs.org/getting-started/webapp/
● Parcel on Production
https://parceljs.org/features/production/

● BrowsersList: https://browserslist.dev